const express=require('express')
const chalk=require('chalk')
const path=require('path')
const hbs=require('hbs')
const app=express()
const publicdirectorypath=path.join(__dirname,'../public');
const pathView=path.join(__dirname,'../templates/views')
const partialsPath=path.join(__dirname,'../templates/partials')
//set up static directory to serve
app.use(express.static(path.join(publicdirectorypath))) //to use the public path for going to index,about,help pages
//set up handlebar engine
app.set('view engine','hbs') 
 //command for using handle bars .handle bars are used for having templates i.e same code that needs to be used again in 
  //index,about,help for example header and footer.handle bars are also useful for dynamic content

 //to use handlebars we basically create views directly
 //but if we want to have a diif directory then
  /* const pathView=path.join(__dirname,'../templates)
 //set up views directory=====>        app.set('views',pathView)*/
  



//heroku -v then heroku login
//git --version then git init
//git status -checks the status of the files lists the untracked files
//node_modules can be generated by running node npm anytime so we dont want to have the data of it.
//we can tell git to leave that file by creating a new file called gitignore and writing the name of the file that has to be ignored





 const request = require('process')
 const geocode=require('./utils/geocode')
 const forecast=require('./utils/forecast')




app.set('views',pathView)
hbs.registerPartials(partialsPath)         
 app.get('',(req,res)=>{
    res.render('index',{
        title:'weather app',
        name:'satwik'
    })
})
app.get('/about',(req,res)=>
{
    res.render('about',{
        title:'about page',  //title jayega header me ,name jayega footer mein 
        name:'satwik'
    })
})
app.get('/help',(req,res)=>
{
    res.render('help',{     //the name help that we are rendering is the name of the help.hbs file
        helpText:'this is the help text', 
        title:'help page',
        name:'satwik'
    })
})
app.get('/weather',(req,res)=>
{
    if(!(req.query.address))        //address dalna zaroori hai plus jo address aega usko req.query.address se access kar skte hain
    {
      return  res.send({
            error:'enter the address '
        })
    }

    geocode(req.query.address,(error,data={})=>     //{} are called default parameters in case you dont provide the value for the parameters then it takes the default values eg data='satwik' ,{} signifies that when we destructure the data then all the destructed items must be given a default value else undefied cannot be destructured
    {
        if(error)
        {
            return res.send({
                error
            })
        }
        forecast(data.latitude, data.longitude, (error, forcastdata) => {
           if(error)
           {
               return res.send({error})
           }
           
           res.send({
               forecast:forcastdata,
               location:data.place,
               address:req.query.address


           })
          
         })
    })
})
app.get('/products',(req,res)=>
    {
        if(!(req.query.search))            //query is url?search=key agar search user ko dalna compulsory karna h to ye uske liye h
        {
            return res.send({                
                error:'please use search as key'
            }
            )
        }
        res.send({
            products:[]
        }
        )

    })
app.get('/help/*',(req,res)=>{
    res.render('404',{
        title:'Error',
        name:'satwik',
        ErrorMessage:'wrong url for help'
    })
})
app.get('*',(req,res)=>{               //* is a wildcard character that matches with anything not defined above
    res.render('404',{               //res.send direct msg print karta h example  res.send("Page not found")
        title:'Error Message',
        name:'satwik',
        ErrorMessage:'Page not found'
    })
})


app.listen(3000,()=>
{
    console.log(chalk.inverse.green('server is up running on port 3000'))
})